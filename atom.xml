<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-TW">
    <title type="text">littlepoco&#39;s Blog</title>
    <subtitle type="html">隨手寫寫一些技術文章或雜文.</subtitle>
    <updated>2021-06-07T09:13:12&#43;08:00</updated>
    <id>https://littlepoco.github.io/</id>
    <link rel="alternate" type="text/html" href="https://littlepoco.github.io/" />
    <link rel="self" type="application/atom&#43;xml" href="https://littlepoco.github.io/atom.xml" />
    <author>
            <name>littlepoco</name>
            <uri>https://littlepoco.github.io/</uri>
            
                <email>littlepocotw@yahoo.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    <generator uri="https://gohugo.io/" version="0.83.1">Hugo</generator>
        <entry>
            <title type="text">Scheme 教學 Part 2: 初次見面</title>
            <link rel="alternate" type="text/html" href="https://littlepoco.github.io/posts/scheme_tutorial_part2/" />
            <id>https://littlepoco.github.io/posts/scheme_tutorial_part2/</id>
            <updated>2021-06-04T16:07:08&#43;08:00</updated>
            <published>2021-06-04T08:49:13&#43;08:00</published>
            <author>
                    <name>littlepoco</name>
                    <uri>https://littlepoco.github.io</uri>
                    <email>littlepocotw@yahoo.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">前言 這篇是Scheme教學的第二篇，還沒看過上一篇的趕快去看，這篇要來正式來教Scheme，那就廢話不多說，來開始吧。 把 Scheme 當作計算機 在上一篇……</summary>
            
                <content type="html">&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/3/39/Lambda_lc.svg/100px-Lambda_lc.svg.png&#34; alt=&#34;Scheme&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;這篇是Scheme教學的第二篇，還沒看過&lt;a href=&#34;https://littlepoco.github.io/posts/scheme_tutorial_part1/&#34;&gt;上一篇&lt;/a&gt;的趕快去看，這篇要來正式來教Scheme，那就廢話不多說，來開始吧。&lt;/p&gt;
&lt;h2 id=&#34;把-scheme-當作計算機&#34;&gt;把 Scheme 當作計算機&lt;/h2&gt;
&lt;p&gt;在上一篇提到，在Terminal底下輸入&lt;code&gt;scheme&lt;/code&gt; ，會出現像這樣的畫面:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Chez Scheme Version 9.5.5
Copyright 1984-2020 Cisco Systems, Inc.

&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;這個其實就是Scheme的REPL，你輸入什麼它便會給你一個輸出，在REPL裡面試試輸入&lt;code&gt;1+1&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; 1+1
Exception: variable &lt;span class=&#34;se&#34;&gt;\x&lt;/span&gt;31&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;+1 is not bound
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;誒？&lt;code&gt;1+1&lt;/code&gt;不是等於2嗎？&lt;/p&gt;
&lt;p&gt;那是因為Scheme採用了&lt;a href=&#34;https://zh.wikipedia.org/wiki/S-%E8%A1%A8%E8%BE%BE%E5%BC%8F&#34;&gt;S-表達式&lt;/a&gt;，這是一種特殊的語法，想得到&lt;code&gt;1+1&lt;/code&gt;的結果必須像下面這樣:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;+ &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; 1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;必須要把+放在前面，然後用括號括起來，這裡的+就是一個函數。這種語法有很多優點，假如你要計算&lt;code&gt;2+3+4&lt;/code&gt;你只要像下面這樣就好了:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;+ &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;還有像如果你要計算&lt;code&gt;1+2*3&lt;/code&gt;，那你是要1先加2再乘3，還是2乘3在加1呢？所以我們才會制定先乘除後加減、括號先計算的規則。在Lisp裡面，這種語法基本上避免了歧義，都是先從最裡面那層開始算：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;+ &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;* &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;關於這種語法的更多優點，你可以參考王垠的這篇文章:&lt;a href=&#34;https://www.yinwang.org/blog-cn/2013/03/08/on-syntax&#34;&gt;谈语法&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;只要懂Lisp這種特有的語法後，其實也蠻有趣的。&lt;/p&gt;
&lt;h3 id=&#34;加減乘除&#34;&gt;加減乘除&lt;/h3&gt;
&lt;p&gt;Scheme除了語法比較怪異以外，其他的加減乘除就跟數學一樣了。&lt;/p&gt;
&lt;p&gt;Scheme跟其他大部分的Lisp方言一樣，也可以處理分數。&lt;/p&gt;
&lt;p&gt;函數&lt;code&gt;exact-&amp;gt;inexact&lt;/code&gt; 用來把分數轉為浮點數。&lt;code&gt;+&lt;/code&gt;、&lt;code&gt;-&lt;/code&gt;、&lt;code&gt;*&lt;/code&gt;、&lt;code&gt;/&lt;/code&gt;分別代表加、減、乘、除。這些函數都接受無限多的參數。&lt;/p&gt;
&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;+ &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;;-&amp;gt; 15&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;+ &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;-&amp;gt; 10&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;- &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;;-&amp;gt; 17&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;- &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;-&amp;gt; 2&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;* &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;;-&amp;gt; 25&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;* &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;-&amp;gt; 125&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;/ &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;;-&amp;gt; 3/4&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;/ &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;-&amp;gt; 5/6&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;/ &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;;-&amp;gt; 2&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;exact-&amp;gt;inexact &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;/ &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;-&amp;gt; 0.8333333333333334&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;pre&gt;&lt;code&gt;練習:

在Scheme的REPL裡面計算下列的式子:

1. (3+40) * (13+14)
2. (1020 / 39) + (45 * 2)
3. 求和: 1, 25, 18, 100, 5
4. 求平均值: 1, 25, 18, 100,5 (結果取為浮點數)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;想退出Scheme的REPL只要輸入&lt;code&gt;(exit)&lt;/code&gt;就好了喔。&lt;/p&gt;
&lt;h2 id=&#34;結語&#34;&gt;結語&lt;/h2&gt;
&lt;p&gt;這篇講完了Scheme特別的S-表達式和簡單的加減乘除後，下篇要繼續來講Scheme的變數，各位可以先練習一下Scheme 。&lt;/p&gt;
&lt;h2 id=&#34;參考&#34;&gt;參考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://deathking.github.io/yast-cn/contents/chapter2.html&#34;&gt;https://deathking.github.io/yast-cn/contents/chapter2.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.yinwang.org/blog-cn/2013/03/08/on-syntax&#34;&gt;https://www.yinwang.org/blog-cn/2013/03/08/on-syntax&lt;/a&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://littlepoco.github.io/tags/scheme/" term="Scheme" label="Scheme" />
                            
                        
                            
                            
                            
                                <category scheme="https://littlepoco.github.io/tags/programming/" term="Programming" label="Programming" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Scheme 教學 Part 1: 介紹與安裝</title>
            <link rel="alternate" type="text/html" href="https://littlepoco.github.io/posts/scheme_tutorial_part1/" />
            <id>https://littlepoco.github.io/posts/scheme_tutorial_part1/</id>
            <updated>2021-06-04T09:33:39&#43;08:00</updated>
            <published>2021-06-03T13:38:16&#43;08:00</published>
            <author>
                    <name>littlepoco</name>
                    <uri>https://littlepoco.github.io</uri>
                    <email>littlepocotw@yahoo.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">前言 我之前想說來學學看一門Lisp方言，因為看到了王垠 (他寫的文章蠻有價值的，有時間的話可以去看一下)寫的許多關於Lisp的文章，所以我便決……</summary>
            
                <content type="html">&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Lisp_logo.svg/1200px-Lisp_logo.svg.png&#34; alt=&#34;Lisp&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;我之前想說來學學看一門Lisp方言，因為看到了&lt;a href=&#34;https://yinwang.org/&#34;&gt;王垠&lt;/a&gt; (他寫的文章蠻有價值的，有時間的話可以去看一下)寫的許多關於Lisp的文章，所以我便決定學習Scheme。其實之前就有學了一點&lt;a href=&#34;https://racket-lang.org&#34;&gt;Racket&lt;/a&gt; ，但是當時沒有把它學完，所以這次決定好好學習Scheme。&lt;/p&gt;
&lt;h2 id=&#34;lisp是什麼&#34;&gt;Lisp是什麼&lt;/h2&gt;
&lt;p&gt;Lisp是John McCarthy在1958年時設計的一種程式語言，是歷史上第二古老的程式語言(僅次於Fortran)，現代的許多程式語言的概念都是從Lisp借鑑過來的，包括:&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)&#34;&gt;Garbage Collection&lt;/a&gt;、&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%A2%9D%E4%BB%B6%E9%81%8B%E7%AE%97%E5%BC%8F&#34;&gt;conditional expressions&lt;/a&gt;、&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92&#34;&gt;Recursion&lt;/a&gt;、&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%AF%BB%E5%8F%96%EF%B9%A3%E6%B1%82%E5%80%BC%EF%B9%A3%E8%BE%93%E5%87%BA%E5%BE%AA%E7%8E%AF&#34;&gt;REPL&lt;/a&gt;...。&lt;/p&gt;
&lt;p&gt;Lisp有許多的優點，你可以參考王垠寫的&lt;a href=&#34;https://www.yinwang.org/blog-cn/2013/03/26/lisp-dead-alive&#34;&gt;這篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;而Lisp也衍生出許多方言，包括:今天要講的Scheme、Common Lisp、從Scheme衍生出去的Racket、Emacs的擴充語言Emacs Lisp、Clojure等等。&lt;/p&gt;
&lt;h2 id=&#34;scheme-介紹&#34;&gt;Scheme 介紹&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/3/39/Lambda_lc.svg/100px-Lambda_lc.svg.png&#34; alt=&#34;Scheme&#34;&gt;&lt;/p&gt;
&lt;p&gt;Scheme是Guy Steele設計的一種Lisp方言，以「大道至簡」為目標，著名的&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E8%A7%A3%E9%87%8A&#34;&gt;SICP&lt;/a&gt;便是使用Scheme來當作教學語言。&lt;/p&gt;
&lt;h2 id=&#34;安裝&#34;&gt;安裝&lt;/h2&gt;
&lt;p&gt;簡單(偷懶?)的講完Scheme後要來安裝了。&lt;/p&gt;
&lt;p&gt;寫Scheme基本上只需要兩個東西:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scheme的compiler&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一個Text Editor&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Text Editor的話用自己喜歡的就好了，我自己的話是用Emacs，但其實如果只是要學習Scheme的話，其實Scheme的REPL就好了。&lt;/p&gt;
&lt;h3 id=&#34;chez-scheme&#34;&gt;Chez Scheme&lt;/h3&gt;
&lt;p&gt;Chez Scheme是一個Scheme的compiler，據說編譯後的Scheme速度非常快，反正我自己是不會用啦，具體可以參考王垠的&lt;a href=&#34;(https://www.yinwang.org/blog-cn/2013/03/28/chez-scheme)&#34;&gt;Chez Scheme 的传说&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;安裝需要的東西需要下列這些:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;GCC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先在Terminal輸入以下Command把Chez Scheme Clone 到自己的電腦:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/cisco/ChezScheme.git
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;接下來下以下Command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./configure
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;接下來等它跑完後輸入以下的指令:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;scheme
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果出現像這樣的畫面就安裝完成了:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Chez Scheme Version 9.5.5
Copyright 1984-2020 Cisco Systems, Inc.

&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;結語&#34;&gt;結語&lt;/h2&gt;
&lt;p&gt;這篇介紹及安裝完Scheme後，下篇要正式來教Scheme了，可以先期待一下。&lt;/p&gt;
&lt;h2 id=&#34;參考&#34;&gt;參考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cisco/ChezScheme/blob/main/BUILDING&#34;&gt;https://github.com/cisco/ChezScheme/blob/main/BUILDING&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/LISP&#34;&gt;https://zh.wikipedia.org/wiki/LISP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.yinwang.org/blog-cn/2013/03/26/lisp-dead-alive&#34;&gt;https://www.yinwang.org/blog-cn/2013/03/26/lisp-dead-alive&lt;/a&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://littlepoco.github.io/tags/scheme/" term="Scheme" label="Scheme" />
                            
                        
                            
                            
                            
                                <category scheme="https://littlepoco.github.io/tags/programming/" term="Programming" label="Programming" />
                            
                        
                    
                
            
        </entry>
    
</feed>
